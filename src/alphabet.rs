const ALPHABETICAL_1: [&[u16]; 26] = [
  &[0x00AA, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x0101, 0x0103, 0x0105, 0x01DF, 0x0201, 0x0203, 0x0227, 0x0250, 0x0251, 0x0252, 0x03AC, 0x03B1, 0x0430, 0x0434, 0x0467, 0x04D1, 0x04D3, 0x15C5, 0x15E9, 0x1D00, 0x1D2C, 0x1D43, 0x1D44, 0x2090, 0x20B3, 0x237A, 0x2C65, 0x4E39, 0x5342, 0xA4EE, 0xAB7A, 0xDC34, 0xDC4E, 0xDC68, 0xDC82, 0xDDA0, 0xDDBA, 0xDEA8, 0xDEC2, 0xDEE2, 0xDEFC, 0xDF1C, 0xDF36, 0xDF40, 0xDF56, 0xDF70, 0xDF90, 0xDFAA],
  &[0x00DF, 0x0180, 0x0183, 0x0185, 0x0253, 0x0284, 0x0299, 0x03B2, 0x0431, 0x0432, 0x044A, 0x044C, 0x0463, 0x048D, 0x0495, 0x0E3F, 0x13FC, 0x1472, 0x15AF, 0x15F7, 0x1D03, 0x1D2E, 0x1D2F, 0x1D47, 0x1D5D, 0x1D66, 0x1D6C, 0x212C, 0x4E43, 0x65E5, 0xA4D0, 0xA7B5, 0xAB9F, 0xDC35, 0xDC4F, 0xDC69, 0xDC83, 0xDDA1, 0xDDBB, 0xDEA9, 0xDEE3, 0xDF01, 0xDF1D, 0xDF57, 0xDF91],
  &[0x00A2, 0x00A9, 0x00E7, 0x0107, 0x0109, 0x010B, 0x010D, 0x0188, 0x023C, 0x0254, 0x0255, 0x0297, 0x037B, 0x037C, 0x037D, 0x0441, 0x0481, 0x04AB, 0x1103, 0x1455, 0x1D04, 0x1D9C, 0x20B5, 0x2102, 0x2103, 0x212D, 0x217D, 0x2CA5, 0x4EA1, 0x531A, 0xA4DA, 0xABAF, 0xDC36, 0xDC50, 0xDC6A, 0xDC84, 0xDDA2, 0xDDBC, 0xDF4C, 0xFFE0],
  &[0x0111, 0x018C, 0x0501, 0x146F, 0x15DE, 0x15EA, 0x1D05, 0x1D06, 0x1D30, 0x1D48, 0x1D5F, 0x1D6D, 0x2145, 0x2146, 0x217E, 0x53E5, 0xA4D2, 0xA4D3, 0xAB70, 0xABB7, 0xDC37, 0xDC51, 0xDC6B, 0xDC85, 0xDDA3, 0xDDBD],
  &[0x00A3, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0113, 0x0115, 0x0117, 0x0119, 0x011B, 0x01B9, 0x01DD, 0x0205, 0x0207, 0x021D, 0x0221, 0x0229, 0x0247, 0x0256, 0x0257, 0x0283, 0x03AD, 0x03B5, 0x03BE, 0x03F1, 0x03F2, 0x03F5, 0x03F6, 0x0435, 0x0450, 0x0451, 0x0454, 0x0465, 0x04BD, 0x04BF, 0x04D7, 0x04D9, 0x04DB, 0x15F4, 0x1D07, 0x1D31, 0x1D49, 0x1D4B, 0x2091, 0x2094, 0x20AC, 0x2107, 0x2108, 0x212E, 0x212F, 0x2130, 0x2140, 0x2147, 0x22FF, 0x2D39, 0x30E8, 0x4E47, 0xA4F0, 0xAB32, 0xAB7C, 0xDC38, 0xDC52, 0xDC6C, 0xDC86, 0xDDA4, 0xDDBE, 0xDEAC, 0xDEE6, 0xDF20, 0xDF5A, 0xDF94, 0xFFE1],
  &[0x010F, 0x017F, 0x0192, 0x0258, 0x0259, 0x025A, 0x025B, 0x025C, 0x025D, 0x025E, 0x03DD, 0x0493, 0x04FB, 0x0584, 0x15B4, 0x1D6E, 0x1DA0, 0x1E9D, 0x20A3, 0x2109, 0x210F, 0x2131, 0x214E, 0x4E4D, 0x5343, 0xA4DD, 0xA730, 0xA799, 0xAB35, 0xDC39, 0xDC53, 0xDC6D, 0xDC87, 0xDDA5, 0xDDBF, 0xDEA5, 0xDFCA],
  &[0x011D, 0x011F, 0x0121, 0x0123, 0x01E5, 0x01E7, 0x01F5, 0x0260, 0x0261, 0x0262, 0x0265, 0x0266, 0x0267, 0x029B, 0x050D, 0x0581, 0x13FB, 0x1D33, 0x1D4D, 0x1D77, 0x1D79, 0x1D83, 0x20B2, 0x210A, 0x5442, 0xA4D6, 0xAB86, 0xAB90, 0xDC3A, 0xDC54, 0xDC6E, 0xDC88, 0xDDA6, 0xDDC0],
  &[0x0125, 0x0127, 0x0195, 0x021F, 0x029C, 0x02AE, 0x02AF, 0x02B0, 0x043D, 0x045B, 0x04A3, 0x04A5, 0x04BB, 0x04C8, 0x04CA, 0x0570, 0x157C, 0x1D34, 0x2095, 0x210B, 0x210C, 0x210D, 0x210E, 0x210F, 0x2C68, 0x2C8F, 0x5344, 0x5EFE, 0xA4E7, 0xAB8B, 0xAB92, 0xDC3B, 0xDC6F, 0xDC89, 0xDDA7, 0xDDC1, 0xDEAE, 0xDECF, 0xDEE8, 0xDF22, 0xDF5C, 0xDF96],
  &[0x00EC, 0x00ED, 0x00EE, 0x00EF, 0x0129, 0x012B, 0x012D, 0x012F, 0x0131, 0x01D0, 0x0209, 0x020B, 0x0268, 0x0269, 0x026A, 0x02DB, 0x037A, 0x03AF, 0x03B9, 0x03CA, 0x0456, 0x0457, 0x04CF, 0x05C0, 0x05D5, 0x05DF, 0x0627, 0x07CA, 0x16C1, 0x1D09, 0x1D35, 0x1D4E, 0x1D62, 0x1D7B, 0x1D7C, 0x1DA6, 0x2071, 0x2110, 0x2111, 0x2139, 0x2148, 0x2170, 0x217C, 0x2223, 0x2373, 0x23FD, 0x2C93, 0x2D4F, 0x4E28, 0x5DE5, 0xA4F2, 0xA647, 0xAB75, 0xDC3C, 0xDC56, 0xDC59, 0xDC70, 0xDC8A, 0xDDA8, 0xDDC2, 0xDDC5, 0xDEA4, 0xDEB0, 0xDECA, 0xDEEA, 0xDF04, 0xDF24, 0xDF3E, 0xDF5E, 0xDF78, 0xDF98, 0xDFB2, 0xFE8D, 0xFFE8],
  &[0x006A, 0x0135, 0x01F0, 0x0237, 0x0249, 0x025F, 0x0279, 0x027A, 0x027B, 0x029D, 0x02B2, 0x03F3, 0x0458, 0x148D, 0x1D0A, 0x1D36, 0x2149, 0x2C7C, 0x52F9, 0xA4D9, 0xAB7B, 0xDC3D, 0xDC57, 0xDC71, 0xDC8B, 0xDDA9, 0xDDC3, 0xFF8C],
  &[0x0137, 0x0138, 0x0199, 0x01E9, 0x029E, 0x03BA, 0x03D7, 0x043A, 0x045C, 0x049B, 0x049D, 0x049F, 0x04A1, 0x16D5, 0x1D0B, 0x1D37, 0x1D4F, 0x2096, 0x20AD, 0x2C95, 0x7247, 0xA4D7, 0xABB6, 0xDC3E, 0xDC58, 0xDC72, 0xDC8C, 0xDDAA, 0xDDC4, 0xDEB1, 0xDEEB, 0xDF25, 0xDF5F, 0xDF99],
  &[0x007C, 0x013A, 0x013C, 0x013E, 0x0140, 0x0142, 0x019A, 0x01AA, 0x01C0, 0x01C1, 0x0234, 0x026B, 0x026C, 0x026D, 0x0285, 0x029F, 0x02E1, 0x0661, 0x06F1, 0x1102, 0x14AA, 0x1D0C, 0x1D38, 0x2097, 0x2112, 0x2113, 0x2142, 0x2143, 0x2C61, 0x2CD1, 0x3057, 0x3125, 0xA4E1, 0xABAE, 0xDC3F, 0xDC73, 0xDC8D, 0xDDAB, 0xDF16, 0xFE8E],
  &[0x0271, 0x03BC, 0x03FB, 0x043C, 0x04CE, 0x15F0, 0x16D6, 0x1D0D, 0x1D1F, 0x1D39, 0x1D50, 0x1D5A, 0x2098, 0x20A5, 0x2133, 0x217F, 0x2C99, 0x518A, 0x722A, 0xA4DF, 0xAB87, 0xDC40, 0xDC5A, 0xDC74, 0xDC8E, 0xDDAC, 0xDDC6, 0xDEB3, 0xDEED, 0xDF11, 0xDF27, 0xDF61, 0xDF9B],
  &[0x00F1, 0x0144, 0x0146, 0x0148, 0x0149, 0x014B, 0x014D, 0x014F, 0x0151, 0x019E, 0x01F9, 0x0235, 0x0272, 0x0273, 0x0274, 0x0377, 0x03AE, 0x03B7, 0x0438, 0x0439, 0x043F, 0x045D, 0x048B, 0x04E3, 0x04E5, 0x0578, 0x057C, 0x144E, 0x1D0E, 0x1D3A, 0x1D3B, 0x1D70, 0x207F, 0x2099, 0x20A6, 0x2115, 0x2C9B, 0x51E0, 0xA4E0, 0xDC41, 0xDC5B, 0xDC75, 0xDC8F, 0xDDAD, 0xDDC7, 0xDEB4, 0xDEEE, 0xDF28, 0xDF62, 0xDF9C],
  &[0x00A4, 0x00B0, 0x00F0, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F8, 0x018D, 0x01A1, 0x01A3, 0x01D2, 0x01ED, 0x01FF, 0x020D, 0x020F, 0x0223, 0x022B, 0x022D, 0x022F, 0x0231, 0x0275, 0x0276, 0x0277, 0x0278, 0x0298, 0x03B8, 0x03BF, 0x03C3, 0x03CC, 0x03D9, 0x043E, 0x0473, 0x047B, 0x047D, 0x04E7, 0x04E9, 0x04EB, 0x0585, 0x05E1, 0x0647, 0x0665, 0x06BE, 0x06C1, 0x06D5, 0x06F5, 0x07C0, 0x0966, 0x09E6, 0x0A66, 0x0AE6, 0x0B20, 0x0B66, 0x0BE6, 0x0C02, 0x0C66, 0x0C82, 0x0CE6, 0x0D02, 0x0D20, 0x0D66, 0x0D82, 0x0E50, 0x0ED0, 0x101D, 0x1040, 0x10FF, 0x12D0, 0x1D0F, 0x1D10, 0x1D11, 0x1D12, 0x1D13, 0x1D16, 0x1D17, 0x1D3C, 0x1D52, 0x1D53, 0x1D54, 0x1D55, 0x200E, 0x2092, 0x2134, 0x24C4, 0x24DE, 0x2C9F, 0x2D54, 0x3007, 0x3116, 0x56DE, 0xA4F3, 0xAB3D, 0xD40E, 0xD428, 0xD4AA, 0xD4C4, 0xD4DE, 0xD4F8, 0xD512, 0xD52C, 0xD546, 0xD560, 0xD57A, 0xD594, 0xD5E2, 0xD5FC, 0xD616, 0xD630, 0xD64A, 0xD664, 0xD67E, 0xD698, 0xDC42, 0xDC5C, 0xDC76, 0xDC90, 0xDDAE, 0xDDC8, 0xDEAB, 0xDEB6, 0xDED0, 0xDED4, 0xDEF0, 0xDF0A, 0xDF0E, 0xDF2A, 0xDF44, 0xDF48, 0xDF64, 0xDF7E, 0xDF82, 0xDF9E, 0xDFB8, 0xDFBC, 0xF13E, 0xF17E, 0xFBA6, 0xFBA7, 0xFBA8, 0xFBA9, 0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD, 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC, 0xFF2F, 0xFF4F],
  &[0x00B6, 0x00FE, 0x01A5, 0x01BF, 0x03C1, 0x03F8, 0x0440, 0x146D, 0x1D18, 0x1D3E, 0x1D56, 0x1D71, 0x1D7D, 0x209A, 0x20B1, 0x2117, 0x2119, 0x2374, 0x2CA3, 0x5369, 0x5C38, 0xA4D1, 0xABB2, 0xDC43, 0xDC5D, 0xDC77, 0xDC91, 0xDDAF, 0xDDC9, 0xDEB8, 0xDED2, 0xDEE0, 0xDEF2, 0xDF0C, 0xDF1A, 0xDF2C, 0xDF46, 0xDF54, 0xDF66, 0xDF80, 0xDF8E, 0xDFA0, 0xDFBA, 0xDFC8],
  &[0x01EB, 0x0239, 0x024B, 0x02A0, 0x051B, 0x0563, 0x0566, 0x146B, 0x1D60, 0x211A, 0x213A, 0x2D55, 0x7532, 0xDC44, 0xDC5E, 0xDC78, 0xDC92, 0xDDB0, 0xDDCA],
  &[0x00AE, 0x0155, 0x0157, 0x0159, 0x0211, 0x0213, 0x024D, 0x027C, 0x027D, 0x027E, 0x027F, 0x0280, 0x0281, 0x02B3, 0x044F, 0x0453, 0x0491, 0x04F7, 0x1587, 0x1D19, 0x1D1A, 0x1D26, 0x1D3F, 0x1D63, 0x1D72, 0x1D73, 0x211B, 0x211C, 0x211D, 0x211E, 0x213E, 0x2C85, 0x5C3A, 0xA4E3, 0xAB47, 0xAB48, 0xAB71, 0xAB81, 0xABA2, 0xDC45, 0xDC5F, 0xDC79, 0xDC93, 0xDDB1, 0xDDCB, 0xDF35],
  &[0x00A7, 0x015B, 0x015D, 0x015F, 0x0161, 0x01A8, 0x0219, 0x023F, 0x0282, 0x02E2, 0x0455, 0x057F, 0x1515, 0x1D74, 0x209B, 0x20B4, 0x4E02, 0x5DF1, 0xA4E2, 0xA731, 0xABA5, 0xABAA, 0xDC46, 0xDC60, 0xDC7A, 0xDC94, 0xDDB2, 0xDDCC, 0xDF3A],
  &[0x0163, 0x0165, 0x0167, 0x01AB, 0x01AD, 0x021B, 0x0236, 0x0287, 0x0288, 0x0373, 0x03C4, 0x03EF, 0x0442, 0x04AD, 0x1D1B, 0x1D40, 0x1D57, 0x2020, 0x209C, 0x20AE, 0x22A4, 0x27D9, 0x2C66, 0x2CA7, 0x3112, 0x535E, 0xA4D4, 0xAB72, 0xDC47, 0xDC61, 0xDC7B, 0xDC95, 0xDDB3, 0xDDCD, 0xDEBB, 0xDEF5, 0xDF15, 0xDF2F, 0xDF68, 0xDF69, 0xDFA3],
  &[0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x016D, 0x016F, 0x0171, 0x0173, 0x01B0, 0x01D4, 0x01D6, 0x01D8, 0x01DA, 0x01DC, 0x0215, 0x0217, 0x0289, 0x028A, 0x028B, 0x03B0, 0x03C5, 0x03CB, 0x0433, 0x0446, 0x057D, 0x1200, 0x144C, 0x1D1C, 0x1D1D, 0x1D1E, 0x1D41, 0x1D58, 0x1D59, 0x1D64, 0x1D7E, 0x1D7F, 0x222A, 0x22C3, 0x3129, 0x51F5, 0xA4F4, 0xA79F, 0xAB4E, 0xAB52, 0xDC48, 0xDC62, 0xDC7C, 0xDC96, 0xDDB4, 0xDDCE, 0xDED6, 0xDF10, 0xDF4A, 0xDF84, 0xDFBE],
  &[0x028C, 0x03BD, 0x0475, 0x0477, 0x05D8, 0x0667, 0x06F7, 0x142F, 0x1D20, 0x1D5B, 0x1D65, 0x2123, 0x2174, 0x2228, 0x22C1, 0x2D38, 0x30EC, 0xA4E6, 0xA6DF, 0xABA9, 0xDC49, 0xDC63, 0xDC7D, 0xDC97, 0xDDB5, 0xDDCF, 0xDECE, 0xDF06, 0xDF08, 0xDF42, 0xDF7C, 0xDFB6],
  &[0x0175, 0x026F, 0x0270, 0x028D, 0x02AC, 0x02B7, 0x0448, 0x0449, 0x0461, 0x047F, 0x051D, 0x0561, 0x15EF, 0x1D21, 0x1D42, 0x20A9, 0x5C71, 0xA4EA, 0xAB83, 0xABA4, 0xDC4A, 0xDC64, 0xDC7E, 0xDC98, 0xDDB6, 0xDDD0, 0xFFE6],
  &[0x00D7, 0x02E3, 0x03C7, 0x03F0, 0x0436, 0x0445, 0x04B3, 0x04FD, 0x04FF, 0x1541, 0x157D, 0x166D, 0x166E, 0x16B7, 0x2093, 0x2135, 0x2179, 0x2573, 0x292B, 0x292C, 0x2A2F, 0x2CAD, 0x2D5D, 0x30E1, 0x4E42, 0xA4EB, 0xAB53, 0xDC4B, 0xDC65, 0xDC7F, 0xDC99, 0xDDB7, 0xDDD1, 0xDEBE, 0xDEF8, 0xDF17, 0xDF32, 0xDF6C, 0xDFA6],
  &[0x00A5, 0x00FD, 0x00FF, 0x0177, 0x019B, 0x01B4, 0x0233, 0x024F, 0x0263, 0x0264, 0x028E, 0x028F, 0x02B8, 0x03B3, 0x03BB, 0x03D2, 0x03D3, 0x03D4, 0x0443, 0x04AF, 0x04B1, 0x04EF, 0x04F1, 0x04F3, 0x04F5, 0x10E7, 0x1D8C, 0x1EFF, 0x213D, 0x2144, 0x2CA9, 0x3068, 0x311A, 0xA4EC, 0xAB5A, 0xAB79, 0xAB8D, 0xDC4C, 0xDC66, 0xDC80, 0xDC9A, 0xDDB8, 0xDDD2, 0xDEB2, 0xDEBC, 0xDEC4, 0xDEF6, 0xDEFE, 0xDF30, 0xDF38, 0xDF43, 0xDF6A, 0xDF72, 0xDFA4, 0xDFAC, 0xFFE5],
  &[0x017A, 0x017C, 0x017E, 0x01B6, 0x0225, 0x0240, 0x0290, 0x0291, 0x03B6, 0x1614, 0x1D22, 0x1D76, 0x1DBB, 0x2124, 0x2128, 0x2C6C, 0x4E59, 0xA4DC, 0xAB93, 0xDC4D, 0xDC67, 0xDC81, 0xDC9B, 0xDDB9, 0xDDD3, 0xDEAD, 0xDEE7, 0xDF21, 0xDF5B, 0xDF95],
];

const ALPHABETICAL_2: [&[(u16, u16)]; 26] = [
  &[(0xD835, 0xDD1E), (0xD835, 0xDD04), (0xD835, 0xDD86), (0xD835, 0xDD6C), (0xD835, 0xDCEA), (0xD835, 0xDCD0), (0xD835, 0xDCB6), (0xD835, 0xDC9C), (0xD835, 0xDD52), (0xD835, 0xDD38), (0xD83C, 0xDD30), (0xD835, 0xDC1A), (0xD835, 0xDC00), (0xD835, 0xDDEE), (0xD835, 0xDDD4), (0xD835, 0xDE22), (0xD835, 0xDE08), (0xD835, 0xDE56), (0xD835, 0xDE3C), (0xD835, 0xDE8A), (0xD835, 0xDE70), (0xD83C, 0xDD70), (0xD835, 0xDEAB), (0xD835, 0xDEB2), (0xD835, 0xDEDB), (0xD835, 0xDEE5), (0xD835, 0xDEEC), (0xD835, 0xDF15), (0xD835, 0xDF59), (0xD835, 0xDF60), (0xD835, 0xDF89), (0xD835, 0xDF93), (0xD835, 0xDFC3)],
  &[(0xD835, 0xDD1F), (0xD835, 0xDD05), (0xD835, 0xDD87), (0xD835, 0xDD6D), (0xD835, 0xDCEB), (0xD835, 0xDCD1), (0xD835, 0xDCB7), (0xD835, 0xDC9D), (0xD835, 0xDD53), (0xD835, 0xDD39), (0xD83C, 0xDD31), (0xD835, 0xDC1B), (0xD835, 0xDC01), (0xD835, 0xDDEF), (0xD835, 0xDDD5), (0xD835, 0xDE23), (0xD835, 0xDE09), (0xD835, 0xDE57), (0xD835, 0xDE3D), (0xD835, 0xDE8B), (0xD835, 0xDE71), (0xD83C, 0xDD71), (0xD835, 0xDEFD)],
  &[(0xD835, 0xDD20), (0xD835, 0xDD06), (0xD835, 0xDD88), (0xD835, 0xDD6E), (0xD835, 0xDCEC), (0xD835, 0xDCD2), (0xD835, 0xDCB8), (0xD835, 0xDC9E), (0xD835, 0xDD54), (0xD835, 0xDD3A), (0xD83C, 0xDD32), (0xD835, 0xDC1C), (0xD835, 0xDC02), (0xD835, 0xDDF0), (0xD835, 0xDDD6), (0xD835, 0xDE24), (0xD835, 0xDE0A), (0xD835, 0xDE58), (0xD835, 0xDE3E), (0xD835, 0xDE8C), (0xD835, 0xDE72), (0xD83C, 0xDD72), (0xD835, 0xDED3), (0xD835, 0xDF0D), (0xD835, 0xDF81), (0xD835, 0xDFBB)],
  &[(0xD835, 0xDD21), (0xD835, 0xDD07), (0xD835, 0xDD89), (0xD835, 0xDD6F), (0xD835, 0xDCED), (0xD835, 0xDCD3), (0xD835, 0xDCB9), (0xD835, 0xDC9F), (0xD835, 0xDD55), (0xD835, 0xDD3B), (0xD83C, 0xDD33), (0xD835, 0xDC1D), (0xD835, 0xDC03), (0xD835, 0xDDF1), (0xD835, 0xDDD7), (0xD835, 0xDE25), (0xD835, 0xDE0B), (0xD835, 0xDE59), (0xD835, 0xDE3F), (0xD835, 0xDE8D), (0xD835, 0xDE73), (0xD83C, 0xDD73)],
  &[(0xD835, 0xDD22), (0xD835, 0xDD08), (0xD835, 0xDD8A), (0xD835, 0xDD70), (0xD835, 0xDCEE), (0xD835, 0xDCD4), (0xD835, 0xDCBA), (0xD835, 0xDCA0), (0xD835, 0xDD56), (0xD835, 0xDD3C), (0xD83C, 0xDD34), (0xD835, 0xDC1E), (0xD835, 0xDC04), (0xD835, 0xDDF2), (0xD835, 0xDDD8), (0xD835, 0xDE26), (0xD835, 0xDE0C), (0xD835, 0xDE5A), (0xD835, 0xDE40), (0xD835, 0xDE8E), (0xD835, 0xDE74), (0xD83C, 0xDD74), (0xD835, 0xDEBA), (0xD835, 0xDEC6), (0xD835, 0xDEDC), (0xD835, 0xDEF4), (0xD835, 0xDF00), (0xD835, 0xDF09), (0xD835, 0xDF16), (0xD835, 0xDF1A), (0xD835, 0xDF68), (0xD835, 0xDF74), (0xD835, 0xDF8A), (0xD835, 0xDF8E), (0xD835, 0xDFA2), (0xD835, 0xDFAE), (0xD835, 0xDFC4), (0xD835, 0xDFC8)],
  &[(0xD835, 0xDD23), (0xD835, 0xDD09), (0xD835, 0xDD8B), (0xD835, 0xDD71), (0xD835, 0xDCEF), (0xD835, 0xDCD5), (0xD835, 0xDCBB), (0xD835, 0xDCA1), (0xD835, 0xDD57), (0xD835, 0xDD3D), (0xD83C, 0xDD35), (0xD835, 0xDC1F), (0xD835, 0xDC05), (0xD835, 0xDDF3), (0xD835, 0xDDD9), (0xD835, 0xDE27), (0xD835, 0xDE0D), (0xD835, 0xDE5B), (0xD835, 0xDE41), (0xD835, 0xDE8F), (0xD835, 0xDE75), (0xD83C, 0xDD75), (0xD835, 0xDFCB)],
  &[(0xD835, 0xDD24), (0xD835, 0xDD0A), (0xD835, 0xDD8C), (0xD835, 0xDD72), (0xD835, 0xDCF0), (0xD835, 0xDCD6), (0xD835, 0xDCBC), (0xD835, 0xDCA2), (0xD835, 0xDD58), (0xD835, 0xDD3E), (0xD83C, 0xDD36), (0xD835, 0xDC20), (0xD835, 0xDC06), (0xD835, 0xDDF4), (0xD835, 0xDDDA), (0xD835, 0xDE28), (0xD835, 0xDE0E), (0xD835, 0xDE5C), (0xD835, 0xDE42), (0xD835, 0xDE90), (0xD835, 0xDE76), (0xD83C, 0xDD76)],
  &[(0xD835, 0xDD25), (0xD835, 0xDD0B), (0xD835, 0xDD8D), (0xD835, 0xDD73), (0xD835, 0xDCF1), (0xD835, 0xDCD7), (0xD835, 0xDCBD), (0xD835, 0xDCA3), (0xD835, 0xDD59), (0xD835, 0xDD3F), (0xD83C, 0xDD37), (0xD835, 0xDC21), (0xD835, 0xDC07), (0xD835, 0xDDF5), (0xD835, 0xDDDB), (0xD835, 0xDE29), (0xD835, 0xDE0F), (0xD835, 0xDE5D), (0xD835, 0xDE43), (0xD835, 0xDE91), (0xD835, 0xDE77), (0xD83C, 0xDD77)],
  &[(0xD835, 0xDD26), (0xD835, 0xDD0C), (0xD835, 0xDD8E), (0xD835, 0xDD74), (0xD835, 0xDCF2), (0xD835, 0xDCD8), (0xD835, 0xDCBE), (0xD835, 0xDCA4), (0xD835, 0xDD5A), (0xD835, 0xDD40), (0xD83C, 0xDD38), (0xD835, 0xDC22), (0xD835, 0xDC08), (0xD835, 0xDDF6), (0xD835, 0xDDDC), (0xD835, 0xDE2A), (0xD835, 0xDE10), (0xD835, 0xDE5E), (0xD835, 0xDE44), (0xD835, 0xDE92), (0xD835, 0xDE78), (0xD83C, 0xDD78), (0xD835, 0xDECA), (0xD835, 0xDF04), (0xD835, 0xDF78), (0xD835, 0xDFB2)],
  &[(0xD835, 0xDD27), (0xD835, 0xDD0D), (0xD835, 0xDD8F), (0xD835, 0xDD75), (0xD835, 0xDCF3), (0xD835, 0xDCD9), (0xD835, 0xDCBF), (0xD835, 0xDCA5), (0xD835, 0xDD5B), (0xD835, 0xDD41), (0xD83C, 0xDD39), (0xD835, 0xDC23), (0xD835, 0xDC09), (0xD835, 0xDDF7), (0xD835, 0xDDDD), (0xD835, 0xDE2B), (0xD835, 0xDE11), (0xD835, 0xDE5F), (0xD835, 0xDE45), (0xD835, 0xDE93), (0xD835, 0xDE79), (0xD83C, 0xDD79)],
  &[(0xD835, 0xDD28), (0xD835, 0xDD0E), (0xD835, 0xDD90), (0xD835, 0xDD76), (0xD835, 0xDCF4), (0xD835, 0xDCDA), (0xD835, 0xDCC0), (0xD835, 0xDCA6), (0xD835, 0xDD5C), (0xD835, 0xDD42), (0xD83C, 0xDD3A), (0xD835, 0xDC24), (0xD835, 0xDC0A), (0xD835, 0xDDF8), (0xD835, 0xDDDE), (0xD835, 0xDE2C), (0xD835, 0xDE12), (0xD835, 0xDE60), (0xD835, 0xDE46), (0xD835, 0xDE94), (0xD835, 0xDE7A), (0xD83C, 0xDD7A), (0xD835, 0xDECB), (0xD835, 0xDF05), (0xD835, 0xDF79), (0xD835, 0xDFB3)],
  &[(0xD835, 0xDD29), (0xD835, 0xDD0F), (0xD835, 0xDD91), (0xD835, 0xDD77), (0xD835, 0xDCF5), (0xD835, 0xDCDB), (0xD835, 0xDCC1), (0xD835, 0xDCA7), (0xD835, 0xDD5D), (0xD835, 0xDD43), (0xD83C, 0xDD3B), (0xD835, 0xDC25), (0xD835, 0xDC0B), (0xD835, 0xDDF9), (0xD835, 0xDDDF), (0xD835, 0xDE2D), (0xD835, 0xDE13), (0xD835, 0xDE61), (0xD835, 0xDE47), (0xD835, 0xDE95), (0xD835, 0xDE7B), (0xD83C, 0xDD7B)],
  &[(0xD835, 0xDD2A), (0xD835, 0xDD10), (0xD835, 0xDD92), (0xD835, 0xDD78), (0xD835, 0xDCF6), (0xD835, 0xDCDC), (0xD835, 0xDCC2), (0xD835, 0xDCA8), (0xD835, 0xDD5E), (0xD835, 0xDD44), (0xD83C, 0xDD3C), (0xD835, 0xDC26), (0xD835, 0xDC0C), (0xD835, 0xDDFA), (0xD835, 0xDDE0), (0xD835, 0xDE2E), (0xD835, 0xDE14), (0xD835, 0xDE62), (0xD835, 0xDE48), (0xD835, 0xDE96), (0xD835, 0xDE7C), (0xD83C, 0xDD7C)],
  &[(0xD835, 0xDD2B), (0xD835, 0xDD11), (0xD835, 0xDD93), (0xD835, 0xDD79), (0xD835, 0xDCF7), (0xD835, 0xDCDD), (0xD835, 0xDCC3), (0xD835, 0xDCA9), (0xD835, 0xDD5F), (0xD835, 0xDD45), (0xD83C, 0xDD3D), (0xD835, 0xDC27), (0xD835, 0xDC0D), (0xD835, 0xDDFB), (0xD835, 0xDDE1), (0xD835, 0xDE2F), (0xD835, 0xDE15), (0xD835, 0xDE63), (0xD835, 0xDE49), (0xD835, 0xDE97), (0xD835, 0xDE7D), (0xD83C, 0xDD7D), (0xD835, 0xDEB7), (0xD835, 0xDEC8), (0xD835, 0xDEF1), (0xD835, 0xDF02), (0xD835, 0xDF65), (0xD835, 0xDF76), (0xD835, 0xDF9F), (0xD835, 0xDFB0)],
  &[(0xD835, 0xDD2C), (0xD835, 0xDD12), (0xD835, 0xDD94), (0xD835, 0xDD7A), (0xD835, 0xDCF8), (0xD835, 0xDCDE), (0xD835, 0xDCC4), (0xD835, 0xDCAA), (0xD835, 0xDD60), (0xD835, 0xDD46), (0xD83C, 0xDD3E), (0xD835, 0xDC28), (0xD835, 0xDC0E), (0xD835, 0xDDFC), (0xD835, 0xDDE2), (0xD835, 0xDE30), (0xD835, 0xDE16), (0xD835, 0xDE64), (0xD835, 0xDE4A), (0xD835, 0xDE98), (0xD835, 0xDE7E), (0xD83C, 0xDD7E), (0xD835, 0xDEAF), (0xD835, 0xDEC9), (0xD835, 0xDED0), (0xD835, 0xDEE9), (0xD835, 0xDF03), (0xD835, 0xDF5D), (0xD835, 0xDF67), (0xD835, 0xDF77), (0xD835, 0xDFB1), (0xD835, 0xDF97)],
  &[(0xD835, 0xDD2D), (0xD835, 0xDD13), (0xD835, 0xDD95), (0xD835, 0xDD7B), (0xD835, 0xDCF9), (0xD835, 0xDCDF), (0xD835, 0xDCC5), (0xD835, 0xDCAB), (0xD835, 0xDD61), (0xD835, 0xDD47), (0xD83C, 0xDD3F), (0xD835, 0xDC29), (0xD835, 0xDC0F), (0xD835, 0xDDFD), (0xD835, 0xDDE3), (0xD835, 0xDE31), (0xD835, 0xDE17), (0xD835, 0xDE65), (0xD835, 0xDE4B), (0xD835, 0xDE99), (0xD835, 0xDE7F), (0xD83C, 0xDD7F), (0xD835, 0xDED2), (0xD835, 0xDF0C), (0xD835, 0xDF80), (0xD835, 0xDFBA)],
  &[(0xD835, 0xDD2E), (0xD835, 0xDD14), (0xD835, 0xDD96), (0xD835, 0xDD7C), (0xD835, 0xDCFA), (0xD835, 0xDCE0), (0xD835, 0xDCC6), (0xD835, 0xDCAC), (0xD835, 0xDD62), (0xD835, 0xDD48), (0xD83C, 0xDD40), (0xD835, 0xDC2A), (0xD835, 0xDC10), (0xD835, 0xDDFE), (0xD835, 0xDDE4), (0xD835, 0xDE32), (0xD835, 0xDE18), (0xD835, 0xDE66), (0xD835, 0xDE4C), (0xD835, 0xDE9A), (0xD835, 0xDE80), (0xD83C, 0xDD80)],
  &[(0xD835, 0xDD2F), (0xD835, 0xDD15), (0xD835, 0xDD97), (0xD835, 0xDD7D), (0xD835, 0xDCFB), (0xD835, 0xDCE1), (0xD835, 0xDCC7), (0xD835, 0xDCAD), (0xD835, 0xDD63), (0xD835, 0xDD49), (0xD83C, 0xDD41), (0xD835, 0xDC2B), (0xD835, 0xDC11), (0xD835, 0xDDFF), (0xD835, 0xDDE5), (0xD835, 0xDE33), (0xD835, 0xDE19), (0xD835, 0xDE67), (0xD835, 0xDE4D), (0xD835, 0xDE9B), (0xD835, 0xDE81), (0xD83C, 0xDD81), (0xD835, 0xDEAA), (0xD835, 0xDEE4), (0xD835, 0xDF58), (0xD835, 0xDF83), (0xD835, 0xDF92)],
  &[(0xD835, 0xDD30), (0xD835, 0xDD16), (0xD835, 0xDD98), (0xD835, 0xDD7E), (0xD835, 0xDCFC), (0xD835, 0xDCE2), (0xD835, 0xDCC8), (0xD835, 0xDCAE), (0xD835, 0xDD64), (0xD835, 0xDD4A), (0xD83C, 0xDD42), (0xD835, 0xDC2C), (0xD835, 0xDC12), (0xD835, 0xDE00), (0xD835, 0xDDE6), (0xD835, 0xDE34), (0xD835, 0xDE1A), (0xD835, 0xDE68), (0xD835, 0xDE4E), (0xD835, 0xDE9C), (0xD835, 0xDE82), (0xD83C, 0xDD82), (0xD835, 0xDEFF)],
  &[(0xD835, 0xDD31), (0xD835, 0xDD17), (0xD835, 0xDD99), (0xD835, 0xDD7F), (0xD835, 0xDCFD), (0xD835, 0xDCE3), (0xD835, 0xDCC9), (0xD835, 0xDCAF), (0xD835, 0xDD65), (0xD835, 0xDD4B), (0xD83C, 0xDD43), (0xD835, 0xDC2D), (0xD835, 0xDC13), (0xD835, 0xDE01), (0xD835, 0xDDE7), (0xD835, 0xDE35), (0xD835, 0xDE1B), (0xD835, 0xDE69), (0xD835, 0xDE4F), (0xD835, 0xDE9D), (0xD835, 0xDE83), (0xD83C, 0xDD83), (0xD835, 0xDED5), (0xD835, 0xDF0F), (0xD835, 0xDFBD)],
  &[(0xD835, 0xDD32), (0xD835, 0xDD18), (0xD835, 0xDD9A), (0xD835, 0xDD80), (0xD835, 0xDCFE), (0xD835, 0xDCE4), (0xD835, 0xDCCA), (0xD835, 0xDCB0), (0xD835, 0xDD66), (0xD835, 0xDD4C), (0xD83C, 0xDD44), (0xD835, 0xDC2E), (0xD835, 0xDC14), (0xD835, 0xDE02), (0xD835, 0xDDE8), (0xD835, 0xDE36), (0xD835, 0xDE1C), (0xD835, 0xDE6A), (0xD835, 0xDE50), (0xD835, 0xDE9E), (0xD835, 0xDE84), (0xD83C, 0xDD84), (0xD835, 0xDED6)],
  &[(0xD835, 0xDD33), (0xD835, 0xDD19), (0xD835, 0xDD9B), (0xD835, 0xDD81), (0xD835, 0xDCFF), (0xD835, 0xDCE5), (0xD835, 0xDCCB), (0xD835, 0xDCB1), (0xD835, 0xDD67), (0xD835, 0xDD4D), (0xD83C, 0xDD45), (0xD835, 0xDC2F), (0xD835, 0xDC15), (0xD835, 0xDE03), (0xD835, 0xDDE9), (0xD835, 0xDE37), (0xD835, 0xDE1D), (0xD835, 0xDE6B), (0xD835, 0xDE51), (0xD835, 0xDE9F), (0xD835, 0xDE85), (0xD83C, 0xDD85), (0xD835, 0xDEC1), (0xD835, 0xDECE), (0xD835, 0xDEFB), (0xD835, 0xDF08), (0xD835, 0xDF6F), (0xD835, 0xDF7C), (0xD835, 0xDFA9), (0xD835, 0xDFB6)],
  &[(0xD835, 0xDD34), (0xD835, 0xDD1A), (0xD835, 0xDD9C), (0xD835, 0xDD82), (0xD835, 0xDD00), (0xD835, 0xDCE6), (0xD835, 0xDCCC), (0xD835, 0xDCB2), (0xD835, 0xDD68), (0xD835, 0xDD4E), (0xD83C, 0xDD46), (0xD835, 0xDC30), (0xD835, 0xDC16), (0xD835, 0xDE04), (0xD835, 0xDDEA), (0xD835, 0xDE38), (0xD835, 0xDE1E), (0xD835, 0xDE6C), (0xD835, 0xDE52), (0xD835, 0xDEA0), (0xD835, 0xDE86), (0xD83C, 0xDD86), (0xD835, 0xDEDA), (0xD835, 0xDF14), (0xD835, 0xDF88), (0xD835, 0xDFC2)],
  &[(0xD835, 0xDD35), (0xD835, 0xDD1B), (0xD835, 0xDD9D), (0xD835, 0xDD83), (0xD835, 0xDD01), (0xD835, 0xDCE7), (0xD835, 0xDCCD), (0xD835, 0xDCB3), (0xD835, 0xDD69), (0xD835, 0xDD4F), (0xD83C, 0xDD47), (0xD835, 0xDC31), (0xD835, 0xDC17), (0xD835, 0xDE05), (0xD835, 0xDDEB), (0xD835, 0xDE39), (0xD835, 0xDE1F), (0xD835, 0xDE6D), (0xD835, 0xDE53), (0xD835, 0xDEA1), (0xD835, 0xDE87), (0xD83C, 0xDD87), (0xD835, 0xDED8), (0xD835, 0xDEDE), (0xD835, 0xDF18), (0xD835, 0xDF86), (0xD835, 0xDF8C), (0xD835, 0xDFC0), (0xD835, 0xDFC6)],
  &[(0xD835, 0xDD36), (0xD835, 0xDD1C), (0xD835, 0xDD9E), (0xD835, 0xDD84), (0xD835, 0xDD02), (0xD835, 0xDCE8), (0xD835, 0xDCCE), (0xD835, 0xDCB4), (0xD835, 0xDD6A), (0xD835, 0xDD50), (0xD83C, 0xDD48), (0xD835, 0xDC32), (0xD835, 0xDC18), (0xD835, 0xDE06), (0xD835, 0xDDEC), (0xD835, 0xDE3A), (0xD835, 0xDE20), (0xD835, 0xDE6E), (0xD835, 0xDE54), (0xD835, 0xDEA2), (0xD835, 0xDE88), (0xD83C, 0xDD88), (0xD835, 0xDEBC), (0xD835, 0xDEC4), (0xD835, 0xDEF6), (0xD835, 0xDF06), (0xD835, 0xDF7A), (0xD835, 0xDFAC), (0xD835, 0xDFB4)],
  &[(0xD835, 0xDD37), (0xD835, 0xDD1D), (0xD835, 0xDD9F), (0xD835, 0xDD85), (0xD835, 0xDD03), (0xD835, 0xDCE9), (0xD835, 0xDCCF), (0xD835, 0xDCB5), (0xD835, 0xDD6B), (0xD835, 0xDD51), (0xD83C, 0xDD49), (0xD835, 0xDC33), (0xD835, 0xDC19), (0xD835, 0xDE07), (0xD835, 0xDDED), (0xD835, 0xDE3B), (0xD835, 0xDE21), (0xD835, 0xDE6F), (0xD835, 0xDE55), (0xD835, 0xDEA3), (0xD835, 0xDE89), (0xD83C, 0xDD89)],
];

const ALPHABETICAL_PATTERN: [u16; 4] = [0xFF41, 0xFF21, 0x24D0, 0x24B6];

pub(crate) fn parse(input: &mut Vec<u16>) {
  let mut flag = false;
  
  for i in 0..input.len() {
    flag = false;
    
    for pat in ALPHABETICAL_PATTERN {
      if input[i] >= pat && input[i] <= (pat + 25) {
        input[i] = input[i] - pat + 97;
        flag = true;
        break;
      }
    }
    
    if !flag {
      for j in 0..ALPHABETICAL_1.len() {
        if ALPHABETICAL_1[j].contains(&input[i]) {
          input[i] = (j as u16) + 97;
          break;
        }
      }
    }
  }
  
  let mut i = 0;
  
  #[allow(unused_assignments)]
  let mut j = 97u16;
  
  loop {
    if i >= (input.len() - 1) {
      return;
    }
    
    j = 97;

    for ch_list in ALPHABETICAL_2 {
      for confusable in ch_list {
        if input[i] == confusable.0 && input[i + 1] == confusable.1 {
          input.remove(i + 1);
          input[i] = j;
          flag = true;
          break;
        }
      }
      
      if flag {
        flag = false;
        break;
      }
      
      j += 1;
    }
    
    i += 1;
  }
}