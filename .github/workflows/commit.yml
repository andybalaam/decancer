name: on commit workflow
env:
  DEBUG: napi:*
  APP_NAME: decancer
  MACOSX_DEPLOYMENT_TARGET: '10.13'
on:
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths:
      - '**/src/**/*.rs'
jobs:
  core:
    name: Test core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: stable
      - name: Run cargo test
        working-directory: core
        run: cargo test
  node:
    strategy:
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
              yarn test
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: set -e && yarn build && strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              yarn build --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    name: Build and test node (stable - ${{ matrix.settings.target }} - node@18)
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: node
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          architecture: ${{ matrix.settings.architecture }}
      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}
      - name: Pull latest image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
        if: ${{ matrix.settings.docker }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: npm install --save-dev --ignore-scripts
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Build typescript
        run: npx tsc
      - name: Run tests
        run: node test.cjs
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            node/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  wasm:
    name: Build wasm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: stable
      - name: Build wasm
        working-directory: wasm
        run: |
          cargo install wasm-pack
          wasm-pack build --no-typescript --release -t web
          mv ./pkg/decancer_wasm_bg.wasm ../decancer.wasm
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: decancer-wasm-binary
          path: |
            decancer.wasm
  publish:
    name: Prettier files, commit, and publish
    runs-on: ubuntu-latest
    needs:
      - core
      - node
      - wasm
    steps:
      - uses: actions/checkout@v3
      - uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: stable
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          architecture: ${{ matrix.settings.architecture }}
      - name: Prettier core crate
        working-directory: core
        run: cargo fmt
      - name: Prettier node crate
        working-directory: node
        run: cargo fmt
      - name: Prettier wasm crate
        working-directory: wasm
        run: cargo fmt
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: decancer-wasm-binary
          path: artifacts
      - name: Move artifact
        run: mv ./artifacts/decancer.wasm ./wasm/bin
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: 'chore: update files on commit'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Remove wasm artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: decancer-wasm-binary
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Test Deno
        run: deno run --allow-net test_deno.ts
      - name: Remove wasm artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: decancer-wasm-binary
      - name: Move README.md and install node dependencies
        working-directory: node
        run: |
          mv ../README.md .
          npm install --save-dev --ignore-scripts
      - name: Download all node artifacts
        uses: actions/download-artifact@v2
        with:
          path: node/artifacts
      - name: Move artifacts
        working-directory: node
        run: node ./node_modules/@napi-rs/cli/scripts/index.js artifacts
      - name: List node packages
        working-directory: node
        run: ls -R ./npm
        shell: bash
      - name: Publish node
        working-directory: node
        run: |
          npx tsc
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}